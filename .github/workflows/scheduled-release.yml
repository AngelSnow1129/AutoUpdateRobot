name: Scheduled Crawl & Release

on:
  schedule:
    - cron: '0 0 1 1,4,7,10 *'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  run-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install 7-Zip
        run: sudo apt-get update && sudo apt-get install -y p7zip-full

      - name: Install Playwright Browsers
        run: playwright install --with-deps

      - name: Run Crawler, Downloader & Sorter Script
        run: python script.py

      - name: Commit History File if Changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "chore: auto update processed_urls.txt [skip ci]"
            git push
          else
            echo "No changes to processed_urls.txt."
          fi

      # [重大修改] 此步骤现在会为每个分类创建一个独立的zip文件
      - name: Prepare Release Files if New Content Exists
        id: prepare_release
        run: |
          if [ -d "downloads_classified" ] && [ "$(ls -A downloads_classified)" ]; then
            echo "New classified files found. Preparing release."
            
            # 1. 循环遍历 classified 目录下的每个学科文件夹
            for subject_dir in downloads_classified/*; do
              if [ -d "$subject_dir" ]; then
                subject_name=$(basename "$subject_dir")
                zip_file="${subject_name}.zip"
                echo "Compressing '$subject_name' to '$zip_file'..."
                # 2. 进入学科目录，将其内容压缩到项目根目录
                (cd "$subject_dir" && 7z a -tzip "../../${zip_file}" .)
              fi
            done
            
            # 3. 设置环境变量，用于后续步骤
            echo "TAG=v$(date -u +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV
            echo "NAME=Auto Release $(date -u +'%Y-%m-%d %H:%M:%S') UTC" >> $GITHUB_ENV
            echo "HAS_FILES=true" >> $GITHUB_ENV
            
            # 4. 生成 Release Notes
            {
              echo "### 自动发布"
              echo ""
              echo "- **时间**: $(date -u +'%Y-%m-%d %H:%M:%S') UTC"
              echo "- **变更记录**: [查看 commit](https://github.com/${{ github.repository }}/commit/$(git rev-parse HEAD))"
              echo "- **说明**: 各学科真题及资料已分类打包，请在下方附件中按需下载。"
            } > RELEASE_NOTES.md
          else
            echo "No new classified files found. Skipping release."
            echo "HAS_FILES=false" >> $GITHUB_ENV
          fi

      # [修改] 此步骤现在会上传所有生成的 .zip 文件
      - name: Create GitHub Release
        if: env.HAS_FILES == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.NAME }}
          body_path: RELEASE_NOTES.md
          # 使用通配符 `*.zip` 来匹配所有在根目录生成的zip文件
          files: '*.zip'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
